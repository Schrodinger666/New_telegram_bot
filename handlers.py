from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import CHAT_ID
from link_manager import link_name_exists, add_link, get_links_info, delete_all_links, user_has_link, add_user_link

MENU_CALLBACK_CREATE_LINK = "create_link"
MENU_CALLBACK_SHOW_LINKS = "show_links"
MENU_CALLBACK_DELETE_ALL_LINKS = "delete_all_links"

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
ASKING_LINK_NAME = 1

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –º–µ–Ω—é."""
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - üéìDecentrathon ReferralüöÄüéì.\n\n"
        "–°–∏–¥–∏—à—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ? –ü—Ä–∏–≥–ª–∞—Å–∏ –±–æ–ª—å—à–µ –Ω–∞—Ä–æ–¥—É!\n"
        "–ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞!"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_keyboard = [
        [
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data=MENU_CALLBACK_CREATE_LINK)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(menu_keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    if query.data == MENU_CALLBACK_CREATE_LINK:
        # Check if the user has already created a link
        user_id = update.effective_user.id
        if user_has_link(user_id):
            await query.edit_message_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–π.")
            return ConversationHandler.END
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Å—Å—ã–ª–∫–∏
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Telegram @—Ç—ç–≥:")
        return ASKING_LINK_NAME
    elif query.data == MENU_CALLBACK_SHOW_LINKS:
        links_info = get_links_info()
        if links_info:
            response = "–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n\n"
            for name, data in links_info.items():
                response += (f"–ò–º—è: {name}\n"
                             f"–°—Å—ã–ª–∫–∞: {data['invite_link']}\n"
                             f"–û—Ç–æ–∑–≤–∞–Ω–∞: {'–î–∞' if data['is_revoked'] else '–ù–µ—Ç'}\n"
                             f"---\n")
            await query.edit_message_text(response)
        else:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
    elif query.data == MENU_CALLBACK_DELETE_ALL_LINKS:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
        await delete_all_links(context)
        await query.edit_message_text("–í—Å–µ —Å—Å—ã–ª–∫–∏ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã.")
    return ConversationHandler.END

async def link_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è —Å—Å—ã–ª–∫–∏, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    link_name = update.message.text.strip()
    user_id = update.effective_user.id

    if user_has_link(user_id):
        await update.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–π.")
        return ConversationHandler.END

    if link_name_exists(link_name):
        # –ò–º—è –∑–∞–Ω—è—Ç–æ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ
        await update.message.reply_text("–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è:")
        return ASKING_LINK_NAME
    else:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        chat_invite_link = await context.bot.create_chat_invite_link(
            chat_id=CHAT_ID,
            name=link_name  # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏–º—è —Å—Å—ã–ª–∫–µ
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ
        add_link(link_name, chat_invite_link)
        add_user_link(user_id, link_name)  # Store the user's created link name
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n–ò–º—è: {link_name}\n–°—Å—ã–ª–∫–∞: {chat_invite_link.invite_link}")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.")
    return ConversationHandler.END
